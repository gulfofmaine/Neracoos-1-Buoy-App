name: "Push"

on: [push]
env:
  LATEST_IMAGE: gmri/neracoos-mariners-dashboard:latest
  TAGGED_IMAGE: gmri/neracoos-mariners-dashboard:${{ github.sha }}

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: "Checkout"
        uses: actions/checkout@v1

      - name: "Login to Docker Hub"
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull latest Docker image
        run: docker pull ${LATEST_IMAGE}
        continue-on-error: true

      - name: Build Docker image
        run: docker build --cache-from ${LATEST_IMAGE} --tag ${TAGGED_IMAGE} --target develop .

      - name: Push Docker image
        run: docker push ${TAGGED_IMAGE}

  unit_tests:
    name: Unit tests, typecheck and coverage
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10

    steps:
      - name: "Checkout"
        uses: actions/checkout@v1

      - name: "Login to Docker Hub"
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: docker pull ${TAGGED_IMAGE}

      - name: Tag Docker image
        run: docker tag ${TAGGED_IMAGE} ${LATEST_IMAGE}

      - name: Run unit tests and coverage
        run: docker-compose run -e CI=true -e CODACY_PROJECT_TOKEN=${{ secrets.CODACY_PROJECT_TOKEN }} client yarn test-with-codacy-coverage

      - name: Typecheck
        run: docker-compose run client yarn types

      - name: Yarn Build
        run: docker-compose run client yarn build

      - name: Build Storybook Pages
        run: docker-compose run client yarn build-storybook

  cypress:
    name: Cypress integration tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30

    steps:
      - name: "Checkout"
        uses: actions/checkout@v1

      - name: "Login to Docker Hub"
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: docker pull ${TAGGED_IMAGE}

      - name: Tag Docker image
        run: docker tag ${TAGGED_IMAGE} ${LATEST_IMAGE}

      - name: Get Cypress version from package.json
        run: echo "CYPRESS_VERSION=$(cat package.json | jq -r '.optionalDependencies.cypress')" >> $GITHUB_ENV

      - name: Cache Cypress
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: Cypress${CYPRESS_VERSION}

      - name: Install Cypress and wait on
        run: npm install cypress@${CYPRESS_VERSION} wait-on

      - name: CORS Proxy container
        run: docker run -p 9090:9090 -e -d "ALLOWED=http://localhost:3000" gmri/cors-proxy:latest

      - name: Start container
        run: client docker-compose run -d -e REACT_APP_PROXY_ROOT=http://localhost:9090/ -p 3000:3000 client yarn start

      - name: Wait for container to become available
        run: npx wait-on http://localhost:3000
        timeout-minutes: 1

      - name: Run Cypress
        run: npx cypress run --config video=false,retries=1 
        timeout-minutes: 15
      
      - name: Archive test screenshots
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Run Cypress and send results to dashboard if the previous run failed
        run: npx cypress run --record --key ${{ secrets.CYPRESS_RECORD_KEY }}
        timeout-minutes: 15
        if: failure()
      
      - name: Archive test videos
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

      - name: Docker-compose Logs
        run: docker-compose logs
        if: always()
